CS130 Project 2 - Design Document
=================================

Please answer all questions in this design document.  Note that the final
feedback section is optional, and you are not required to answer it if you
don't want to.

Unanswered or incompletely answered questions, or answers that don't actually
match the code/repository, will result in deductions.

Answers don't have to be deeply detailed!  We are mainly looking for an
overview or summary description of how your project works, and your team's
experiences working on this project.

Logistics (7 pts)
-----------------

L1.  [2pts] Enumerate all teammates here.
Thomas Barrett, Riley O'Neil, Serena Yan


L2.  [2pts] What did each teammate focus on during this project?
Riley: Saving and Loading Workbook
Thomas: Cell Notifications and Renaming Sheets
Serena: Copying Sheets

L3.  [3pts] Approximately how many hours did each teammate spend on the project?
Thomas: 12 
Riley: 8
Serena: 4

Spreadsheet Engine Design (16 pts)
----------------------------------

D1.  [4pts] Briefly describe how your workbook-loading code operates.  Does
     it do anything sophisticated to optimize the performance of loading a
     workbook, such as deferring cell-value update calculations, or analyzing
     the graph of cell dependencies?

     The workbook loads a JSON file using the builtin JSON file. JSON parsing
     errors are allowed to propogate. All keys and value types are checked, and
     throw an appropriate Key or Type error respectively. All properties of the
     JSON object are iterated over. For each sheet, the new_sheet method is
     called. For each cell in a sheet, the spreadsheet.set_cell_contents method
     is called. The loaded workbook is returned. The entire operation is wrapped
     in an UpdateContext so that the values of all cells are recomputed once after
     all cells are loaded. 

D2.  [4pts] Sheet-level operations like copying a sheet, deleting a sheet,
     renaming a sheet, or even creating a new sheet, can cause cell values
     to be updated.  How does your workbook identify such cells and ensure
     that they are updated properly?

     Any time that any of these operations occur, the value of every cell
     in the workbook is recalculated. This is a simple way to ensure correctness.
     In the future, we will look to optimize.

D3.  [8pts] When renaming a sheet, cells with formulas that explicitly
     reference the renamed sheet must be updated with the new sheet name.
     Give an overview of how your implementation updates these formulas.

     When any sheet is renamed, all cells in the workbook are asked to update
     their contents to account for the renamed sheet. Each cell first compiles
     a list of the sheet names it references, it the sheet that was renamed
     is not referenced, then the cell does nothing. If the sheet that was renamed
     is referenced, then the cell uses a lark transformed to change all instances
     of the old sheet name to the new sheet name and also properly quotes all
     sheet names. Finally, a second lark transformer computes a stringified
     version of the original tree.

Spreadsheet Engine Code Review (24 pts)
---------------------------------------

R1.  [4pts] What part of your spreadsheet code-base did your team select to
     review?  Why did you select this portion of your code to review?

     We decided to code review our loop detection and topological sort. We wanted to 
     review this portion of our code because it was confusing to some of us and we 
     figured it would be important to understand going forward.

R2.  [4pts] Approximately how much code did your team review?  How much time did
     the meeting take?

     500 lines. We fixed a fatal error by adding 20 characters of code! Our dependency 
     graph was originally reversed and a filter was breaking the order.

R3.  [8pts] Include the list of action-items that were generated by the
     code-review here.

     Right now everytime we update a cell, we build a new dependency graph of the whole 
     workbook and update every single cell in the workbook. So we could optimize update 
     cell in the following ways:
          
          Instead of rebuilding a graph, we have graph stored in memory, and create new 
          functions add_edge, remove_edge, add_vertex, remove_vertex to change the graph
          
          Instead of changing all the cells in the topological sort dependency graph, 
          we just stop until we traverse to the cell in the graph

     Bad reference in the graph
          Keep a list of bad reference cells and check through all of them to potential solutions


R4.  [4pts] Have you been able to address the action items identified?  If not,
     what is your plan and timeframe to do so?

     We addressed the issue with our topological sort and the errors that then 
     propagated into the cell update order. We plan to address issues with our 
     graph building and modifying. Within the next two weeks we want to work on 
     caching a list of cell reference dependencies rather than re-computing everytime. 
     Long term we want to look into modifying our graph rather than recomputing on cell update.

R5.  [4pts] Reflect on whether the code review helped with knowledge-sharing in
     the team.  Do teammates feel more confident maintaining the code that was
     reviewed, and/or extending the code in the future?

     Yes, the code review helped us better understand our topological sort and 
     loop detection. It also helped us catch an error we didnâ€™t know we had! 
     It should also help us all contribute to this section of the code base.

Performance Analysis (22 pts)
-----------------------------

In this project you must measure and analyze the performance of two central
areas of your spreadsheet engine.  Using pair programming, construct some
performance tests to exercise these aspects of your engine, and use a profiler
to identify where your program is spending the bulk of its time.

A1.  [4pts] Briefly enumerate the performance tests you created to exercise
     your implementation, along with the teammates that collaborated to
     implement each of them.

     Riley and Thomas worked together to implement speed tests.
     We wrote a variety of tests that could measure things like spreadsheet
     build time and recomputation time / efficiency of our spreadsheet. We did
     this by generating a large spreadsheet that contained equatons that would all
     reference know cells and then we could modify one of the known cells to trigger
     a certain percent of the spreadhsheet to update. We could then compare our 
     recomputations to the optimum number of recomputations


A2.  [4pts] What profiler did you choose to run your performance tests with?
     Why?  Give an example of how to invoke one of your tests with the profiler.

     We used the builtin cProfiler because it comes built in to the python
     library and has lots of documentation and examples about how it should
     be used. It has lots of useful features including the ability to count
     how many times each function was called. The tests can be run with the command
     ```
     python3 speedTest.py
     ```

A3.  [8pts] What are ~3 of the most significant hot-spots you identified in your
     performance testing?  Did you expect these hot-spots, or were they
     surprising to you?

     One major hotspot we identitfied immediately was our implementation of Lark.
     everytime we re-computed the value of a cell we also re-read the Lark filefor
     every cell. This caused us to read the LArk file hundreds of times for a single
     update.

     Another hotspot we identified was we have poorly implemented any way to 
     perform large spreadsheet updates which may cause issues copying/pasting 
     a large number of cells later down the road. We can get around this issue
     by calling spreadsheet method directly and then triggering a batch update
     but it is a littlebit inelegant.

     The third most important hotspot we identified was with re-computaing cells
     values because our re-compute method also rebuilds our graph even when it
     does not need to. this means even changing values of cells with no dependees
     will trigger the graph to be re-built.


A4.  [6pts] Reflect on the experience of pair-programming as you constructed
     these tests.  What went well with it?  What would you like to try to do
     better in the future?

     Overall it went very smoothly. There were no major difficulties in the
     pair programming experience. It probably helps that we are roomates
     which makes it convenient. Next time we plan to include more snacks.
